// Code generated by MockGen. DO NOT EDIT.
// Source: ./dynmgrm.go
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_dynmgrm.go -package=mocks -source=./dynmgrm.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
	callbacks "gorm.io/gorm/callbacks"
)

// MockDBOpener is a mock of DBOpener interface.
type MockDBOpener struct {
	ctrl     *gomock.Controller
	recorder *MockDBOpenerMockRecorder
	isgomock struct{}
}

// MockDBOpenerMockRecorder is the mock recorder for MockDBOpener.
type MockDBOpenerMockRecorder struct {
	mock *MockDBOpener
}

// NewMockDBOpener creates a new mock instance.
func NewMockDBOpener(ctrl *gomock.Controller) *MockDBOpener {
	mock := &MockDBOpener{ctrl: ctrl}
	mock.recorder = &MockDBOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBOpener) EXPECT() *MockDBOpenerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockDBOpener) Apply() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockDBOpenerMockRecorder) Apply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockDBOpener)(nil).Apply))
}

// DSN mocks base method.
func (m *MockDBOpener) DSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// DSN indicates an expected call of DSN.
func (mr *MockDBOpenerMockRecorder) DSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DSN", reflect.TypeOf((*MockDBOpener)(nil).DSN))
}

// DriverName mocks base method.
func (m *MockDBOpener) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockDBOpenerMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockDBOpener)(nil).DriverName))
}

// MockCallbacksRegisterer is a mock of CallbacksRegisterer interface.
type MockCallbacksRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockCallbacksRegistererMockRecorder
	isgomock struct{}
}

// MockCallbacksRegistererMockRecorder is the mock recorder for MockCallbacksRegisterer.
type MockCallbacksRegistererMockRecorder struct {
	mock *MockCallbacksRegisterer
}

// NewMockCallbacksRegisterer creates a new mock instance.
func NewMockCallbacksRegisterer(ctrl *gomock.Controller) *MockCallbacksRegisterer {
	mock := &MockCallbacksRegisterer{ctrl: ctrl}
	mock.recorder = &MockCallbacksRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbacksRegisterer) EXPECT() *MockCallbacksRegistererMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockCallbacksRegisterer) Register(db *gorm.DB, config *callbacks.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", db, config)
}

// Register indicates an expected call of Register.
func (mr *MockCallbacksRegistererMockRecorder) Register(db, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCallbacksRegisterer)(nil).Register), db, config)
}
