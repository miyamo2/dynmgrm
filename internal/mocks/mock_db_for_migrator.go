// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/miyamo2/dynmgrm (interfaces: DBForMigrator)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_db_for_migrator.go -package=mocks github.com/miyamo2/dynmgrm DBForMigrator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDBForMigrator is a mock of DBForMigrator interface.
type MockDBForMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockDBForMigratorMockRecorder
	isgomock struct{}
}

// MockDBForMigratorMockRecorder is the mock recorder for MockDBForMigrator.
type MockDBForMigratorMockRecorder struct {
	mock *MockDBForMigrator
}

// NewMockDBForMigrator creates a new mock instance.
func NewMockDBForMigrator(ctrl *gomock.Controller) *MockDBForMigrator {
	mock := &MockDBForMigrator{ctrl: ctrl}
	mock.recorder = &MockDBForMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBForMigrator) EXPECT() *MockDBForMigratorMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockDBForMigrator) AddError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockDBForMigratorMockRecorder) AddError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockDBForMigrator)(nil).AddError), err)
}

// Exec mocks base method.
func (m *MockDBForMigrator) Exec(sql string, values ...any) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDBForMigratorMockRecorder) Exec(sql any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBForMigrator)(nil).Exec), varargs...)
}
