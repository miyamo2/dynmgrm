// Code generated by MockGen. DO NOT EDIT.
// Source: ./migrator.go
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_migrator.go -package=mocks -source=./migrator.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dynmgrm "github.com/miyamo2/dynmgrm"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
	schema "gorm.io/gorm/schema"
)

// MockCapacityUnitsSpecifier is a mock of CapacityUnitsSpecifier interface.
type MockCapacityUnitsSpecifier struct {
	ctrl     *gomock.Controller
	recorder *MockCapacityUnitsSpecifierMockRecorder
}

// MockCapacityUnitsSpecifierMockRecorder is the mock recorder for MockCapacityUnitsSpecifier.
type MockCapacityUnitsSpecifierMockRecorder struct {
	mock *MockCapacityUnitsSpecifier
}

// NewMockCapacityUnitsSpecifier creates a new mock instance.
func NewMockCapacityUnitsSpecifier(ctrl *gomock.Controller) *MockCapacityUnitsSpecifier {
	mock := &MockCapacityUnitsSpecifier{ctrl: ctrl}
	mock.recorder = &MockCapacityUnitsSpecifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapacityUnitsSpecifier) EXPECT() *MockCapacityUnitsSpecifierMockRecorder {
	return m.recorder
}

// RCU mocks base method.
func (m *MockCapacityUnitsSpecifier) RCU() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RCU")
	ret0, _ := ret[0].(int)
	return ret0
}

// RCU indicates an expected call of RCU.
func (mr *MockCapacityUnitsSpecifierMockRecorder) RCU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RCU", reflect.TypeOf((*MockCapacityUnitsSpecifier)(nil).RCU))
}

// WCU mocks base method.
func (m *MockCapacityUnitsSpecifier) WCU() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WCU")
	ret0, _ := ret[0].(int)
	return ret0
}

// WCU indicates an expected call of WCU.
func (mr *MockCapacityUnitsSpecifierMockRecorder) WCU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WCU", reflect.TypeOf((*MockCapacityUnitsSpecifier)(nil).WCU))
}

// MockTableClassSpecifier is a mock of TableClassSpecifier interface.
type MockTableClassSpecifier struct {
	ctrl     *gomock.Controller
	recorder *MockTableClassSpecifierMockRecorder
}

// MockTableClassSpecifierMockRecorder is the mock recorder for MockTableClassSpecifier.
type MockTableClassSpecifierMockRecorder struct {
	mock *MockTableClassSpecifier
}

// NewMockTableClassSpecifier creates a new mock instance.
func NewMockTableClassSpecifier(ctrl *gomock.Controller) *MockTableClassSpecifier {
	mock := &MockTableClassSpecifier{ctrl: ctrl}
	mock.recorder = &MockTableClassSpecifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableClassSpecifier) EXPECT() *MockTableClassSpecifierMockRecorder {
	return m.recorder
}

// TableClass mocks base method.
func (m *MockTableClassSpecifier) TableClass() dynmgrm.TableClass {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableClass")
	ret0, _ := ret[0].(dynmgrm.TableClass)
	return ret0
}

// TableClass indicates an expected call of TableClass.
func (mr *MockTableClassSpecifierMockRecorder) TableClass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableClass", reflect.TypeOf((*MockTableClassSpecifier)(nil).TableClass))
}

// MockdbForMigrator is a mock of dbForMigrator interface.
type MockdbForMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockdbForMigratorMockRecorder
}

// MockdbForMigratorMockRecorder is the mock recorder for MockdbForMigrator.
type MockdbForMigratorMockRecorder struct {
	mock *MockdbForMigrator
}

// NewMockdbForMigrator creates a new mock instance.
func NewMockdbForMigrator(ctrl *gomock.Controller) *MockdbForMigrator {
	mock := &MockdbForMigrator{ctrl: ctrl}
	mock.recorder = &MockdbForMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbForMigrator) EXPECT() *MockdbForMigratorMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockdbForMigrator) AddError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockdbForMigratorMockRecorder) AddError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockdbForMigrator)(nil).AddError), err)
}

// Exec mocks base method.
func (m *MockdbForMigrator) Exec(sql string, values ...any) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockdbForMigratorMockRecorder) Exec(sql any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockdbForMigrator)(nil).Exec), varargs...)
}

// MockbaseMigrator is a mock of baseMigrator interface.
type MockbaseMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockbaseMigratorMockRecorder
}

// MockbaseMigratorMockRecorder is the mock recorder for MockbaseMigrator.
type MockbaseMigratorMockRecorder struct {
	mock *MockbaseMigrator
}

// NewMockbaseMigrator creates a new mock instance.
func NewMockbaseMigrator(ctrl *gomock.Controller) *MockbaseMigrator {
	mock := &MockbaseMigrator{ctrl: ctrl}
	mock.recorder = &MockbaseMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbaseMigrator) EXPECT() *MockbaseMigratorMockRecorder {
	return m.recorder
}

// AddColumn mocks base method.
func (m *MockbaseMigrator) AddColumn(dst any, field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddColumn", dst, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddColumn indicates an expected call of AddColumn.
func (mr *MockbaseMigratorMockRecorder) AddColumn(dst, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddColumn", reflect.TypeOf((*MockbaseMigrator)(nil).AddColumn), dst, field)
}

// AlterColumn mocks base method.
func (m *MockbaseMigrator) AlterColumn(dst any, field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterColumn", dst, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterColumn indicates an expected call of AlterColumn.
func (mr *MockbaseMigratorMockRecorder) AlterColumn(dst, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterColumn", reflect.TypeOf((*MockbaseMigrator)(nil).AlterColumn), dst, field)
}

// AutoMigrate mocks base method.
func (m *MockbaseMigrator) AutoMigrate(dst ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockbaseMigratorMockRecorder) AutoMigrate(dst ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockbaseMigrator)(nil).AutoMigrate), dst...)
}

// ColumnTypes mocks base method.
func (m *MockbaseMigrator) ColumnTypes(dst any) ([]gorm.ColumnType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypes", dst)
	ret0, _ := ret[0].([]gorm.ColumnType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColumnTypes indicates an expected call of ColumnTypes.
func (mr *MockbaseMigratorMockRecorder) ColumnTypes(dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypes", reflect.TypeOf((*MockbaseMigrator)(nil).ColumnTypes), dst)
}

// CreateConstraint mocks base method.
func (m *MockbaseMigrator) CreateConstraint(dst any, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConstraint", dst, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConstraint indicates an expected call of CreateConstraint.
func (mr *MockbaseMigratorMockRecorder) CreateConstraint(dst, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConstraint", reflect.TypeOf((*MockbaseMigrator)(nil).CreateConstraint), dst, name)
}

// CreateIndex mocks base method.
func (m *MockbaseMigrator) CreateIndex(dst any, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", dst, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockbaseMigratorMockRecorder) CreateIndex(dst, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockbaseMigrator)(nil).CreateIndex), dst, name)
}

// CreateTable mocks base method.
func (m *MockbaseMigrator) CreateTable(dst ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockbaseMigratorMockRecorder) CreateTable(dst ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockbaseMigrator)(nil).CreateTable), dst...)
}

// CreateView mocks base method.
func (m *MockbaseMigrator) CreateView(name string, option gorm.ViewOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", name, option)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateView indicates an expected call of CreateView.
func (mr *MockbaseMigratorMockRecorder) CreateView(name, option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockbaseMigrator)(nil).CreateView), name, option)
}

// CurrentDatabase mocks base method.
func (m *MockbaseMigrator) CurrentDatabase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentDatabase")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentDatabase indicates an expected call of CurrentDatabase.
func (mr *MockbaseMigratorMockRecorder) CurrentDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentDatabase", reflect.TypeOf((*MockbaseMigrator)(nil).CurrentDatabase))
}

// CurrentTable mocks base method.
func (m *MockbaseMigrator) CurrentTable(stmt *gorm.Statement) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTable", stmt)
	ret0, _ := ret[0].(any)
	return ret0
}

// CurrentTable indicates an expected call of CurrentTable.
func (mr *MockbaseMigratorMockRecorder) CurrentTable(stmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTable", reflect.TypeOf((*MockbaseMigrator)(nil).CurrentTable), stmt)
}

// DropColumn mocks base method.
func (m *MockbaseMigrator) DropColumn(dst any, field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropColumn", dst, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropColumn indicates an expected call of DropColumn.
func (mr *MockbaseMigratorMockRecorder) DropColumn(dst, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropColumn", reflect.TypeOf((*MockbaseMigrator)(nil).DropColumn), dst, field)
}

// DropConstraint mocks base method.
func (m *MockbaseMigrator) DropConstraint(dst any, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropConstraint", dst, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropConstraint indicates an expected call of DropConstraint.
func (mr *MockbaseMigratorMockRecorder) DropConstraint(dst, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropConstraint", reflect.TypeOf((*MockbaseMigrator)(nil).DropConstraint), dst, name)
}

// DropIndex mocks base method.
func (m *MockbaseMigrator) DropIndex(dst any, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndex", dst, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndex indicates an expected call of DropIndex.
func (mr *MockbaseMigratorMockRecorder) DropIndex(dst, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndex", reflect.TypeOf((*MockbaseMigrator)(nil).DropIndex), dst, name)
}

// DropTable mocks base method.
func (m *MockbaseMigrator) DropTable(dst ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockbaseMigratorMockRecorder) DropTable(dst ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockbaseMigrator)(nil).DropTable), dst...)
}

// DropView mocks base method.
func (m *MockbaseMigrator) DropView(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropView", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropView indicates an expected call of DropView.
func (mr *MockbaseMigratorMockRecorder) DropView(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropView", reflect.TypeOf((*MockbaseMigrator)(nil).DropView), name)
}

// FullDataTypeOf mocks base method.
func (m *MockbaseMigrator) FullDataTypeOf(arg0 *schema.Field) clause.Expr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullDataTypeOf", arg0)
	ret0, _ := ret[0].(clause.Expr)
	return ret0
}

// FullDataTypeOf indicates an expected call of FullDataTypeOf.
func (mr *MockbaseMigratorMockRecorder) FullDataTypeOf(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullDataTypeOf", reflect.TypeOf((*MockbaseMigrator)(nil).FullDataTypeOf), arg0)
}

// GetIndexes mocks base method.
func (m *MockbaseMigrator) GetIndexes(dst any) ([]gorm.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexes", dst)
	ret0, _ := ret[0].([]gorm.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexes indicates an expected call of GetIndexes.
func (mr *MockbaseMigratorMockRecorder) GetIndexes(dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexes", reflect.TypeOf((*MockbaseMigrator)(nil).GetIndexes), dst)
}

// GetTables mocks base method.
func (m *MockbaseMigrator) GetTables() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockbaseMigratorMockRecorder) GetTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockbaseMigrator)(nil).GetTables))
}

// GetTypeAliases mocks base method.
func (m *MockbaseMigrator) GetTypeAliases(databaseTypeName string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeAliases", databaseTypeName)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTypeAliases indicates an expected call of GetTypeAliases.
func (mr *MockbaseMigratorMockRecorder) GetTypeAliases(databaseTypeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeAliases", reflect.TypeOf((*MockbaseMigrator)(nil).GetTypeAliases), databaseTypeName)
}

// HasColumn mocks base method.
func (m *MockbaseMigrator) HasColumn(dst any, field string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasColumn", dst, field)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasColumn indicates an expected call of HasColumn.
func (mr *MockbaseMigratorMockRecorder) HasColumn(dst, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasColumn", reflect.TypeOf((*MockbaseMigrator)(nil).HasColumn), dst, field)
}

// HasConstraint mocks base method.
func (m *MockbaseMigrator) HasConstraint(dst any, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConstraint", dst, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConstraint indicates an expected call of HasConstraint.
func (mr *MockbaseMigratorMockRecorder) HasConstraint(dst, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConstraint", reflect.TypeOf((*MockbaseMigrator)(nil).HasConstraint), dst, name)
}

// HasIndex mocks base method.
func (m *MockbaseMigrator) HasIndex(dst any, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasIndex", dst, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasIndex indicates an expected call of HasIndex.
func (mr *MockbaseMigratorMockRecorder) HasIndex(dst, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasIndex", reflect.TypeOf((*MockbaseMigrator)(nil).HasIndex), dst, name)
}

// HasTable mocks base method.
func (m *MockbaseMigrator) HasTable(dst any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTable", dst)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable.
func (mr *MockbaseMigratorMockRecorder) HasTable(dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTable", reflect.TypeOf((*MockbaseMigrator)(nil).HasTable), dst)
}

// MigrateColumn mocks base method.
func (m *MockbaseMigrator) MigrateColumn(dst any, field *schema.Field, columnType gorm.ColumnType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateColumn", dst, field, columnType)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateColumn indicates an expected call of MigrateColumn.
func (mr *MockbaseMigratorMockRecorder) MigrateColumn(dst, field, columnType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateColumn", reflect.TypeOf((*MockbaseMigrator)(nil).MigrateColumn), dst, field, columnType)
}

// MigrateColumnUnique mocks base method.
func (m *MockbaseMigrator) MigrateColumnUnique(dst any, field *schema.Field, columnType gorm.ColumnType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateColumnUnique", dst, field, columnType)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateColumnUnique indicates an expected call of MigrateColumnUnique.
func (mr *MockbaseMigratorMockRecorder) MigrateColumnUnique(dst, field, columnType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateColumnUnique", reflect.TypeOf((*MockbaseMigrator)(nil).MigrateColumnUnique), dst, field, columnType)
}

// RenameColumn mocks base method.
func (m *MockbaseMigrator) RenameColumn(dst any, oldName, field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameColumn", dst, oldName, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameColumn indicates an expected call of RenameColumn.
func (mr *MockbaseMigratorMockRecorder) RenameColumn(dst, oldName, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameColumn", reflect.TypeOf((*MockbaseMigrator)(nil).RenameColumn), dst, oldName, field)
}

// RenameIndex mocks base method.
func (m *MockbaseMigrator) RenameIndex(dst any, oldName, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameIndex", dst, oldName, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameIndex indicates an expected call of RenameIndex.
func (mr *MockbaseMigratorMockRecorder) RenameIndex(dst, oldName, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameIndex", reflect.TypeOf((*MockbaseMigrator)(nil).RenameIndex), dst, oldName, newName)
}

// RenameTable mocks base method.
func (m *MockbaseMigrator) RenameTable(oldName, newName any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameTable", oldName, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameTable indicates an expected call of RenameTable.
func (mr *MockbaseMigratorMockRecorder) RenameTable(oldName, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameTable", reflect.TypeOf((*MockbaseMigrator)(nil).RenameTable), oldName, newName)
}

// RunWithValue mocks base method.
func (m *MockbaseMigrator) RunWithValue(value any, fc func(*gorm.Statement) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithValue", value, fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithValue indicates an expected call of RunWithValue.
func (mr *MockbaseMigratorMockRecorder) RunWithValue(value, fc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithValue", reflect.TypeOf((*MockbaseMigrator)(nil).RunWithValue), value, fc)
}

// TableType mocks base method.
func (m *MockbaseMigrator) TableType(dst any) (gorm.TableType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableType", dst)
	ret0, _ := ret[0].(gorm.TableType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableType indicates an expected call of TableType.
func (mr *MockbaseMigratorMockRecorder) TableType(dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableType", reflect.TypeOf((*MockbaseMigrator)(nil).TableType), dst)
}
