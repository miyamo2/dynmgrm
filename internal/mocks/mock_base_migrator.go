// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/miyamo2/dynmgrm (interfaces: BaseMigrator)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_base_migrator.go -package=mocks github.com/miyamo2/dynmgrm BaseMigrator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
	schema "gorm.io/gorm/schema"
)

// MockBaseMigrator is a mock of BaseMigrator interface.
type MockBaseMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockBaseMigratorMockRecorder
}

// MockBaseMigratorMockRecorder is the mock recorder for MockBaseMigrator.
type MockBaseMigratorMockRecorder struct {
	mock *MockBaseMigrator
}

// NewMockBaseMigrator creates a new mock instance.
func NewMockBaseMigrator(ctrl *gomock.Controller) *MockBaseMigrator {
	mock := &MockBaseMigrator{ctrl: ctrl}
	mock.recorder = &MockBaseMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseMigrator) EXPECT() *MockBaseMigratorMockRecorder {
	return m.recorder
}

// AddColumn mocks base method.
func (m *MockBaseMigrator) AddColumn(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddColumn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddColumn indicates an expected call of AddColumn.
func (mr *MockBaseMigratorMockRecorder) AddColumn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddColumn", reflect.TypeOf((*MockBaseMigrator)(nil).AddColumn), arg0, arg1)
}

// AlterColumn mocks base method.
func (m *MockBaseMigrator) AlterColumn(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterColumn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterColumn indicates an expected call of AlterColumn.
func (mr *MockBaseMigratorMockRecorder) AlterColumn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterColumn", reflect.TypeOf((*MockBaseMigrator)(nil).AlterColumn), arg0, arg1)
}

// AutoMigrate mocks base method.
func (m *MockBaseMigrator) AutoMigrate(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockBaseMigratorMockRecorder) AutoMigrate(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockBaseMigrator)(nil).AutoMigrate), arg0...)
}

// ColumnTypes mocks base method.
func (m *MockBaseMigrator) ColumnTypes(arg0 any) ([]gorm.ColumnType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypes", arg0)
	ret0, _ := ret[0].([]gorm.ColumnType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColumnTypes indicates an expected call of ColumnTypes.
func (mr *MockBaseMigratorMockRecorder) ColumnTypes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypes", reflect.TypeOf((*MockBaseMigrator)(nil).ColumnTypes), arg0)
}

// CreateConstraint mocks base method.
func (m *MockBaseMigrator) CreateConstraint(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConstraint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConstraint indicates an expected call of CreateConstraint.
func (mr *MockBaseMigratorMockRecorder) CreateConstraint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConstraint", reflect.TypeOf((*MockBaseMigrator)(nil).CreateConstraint), arg0, arg1)
}

// CreateIndex mocks base method.
func (m *MockBaseMigrator) CreateIndex(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockBaseMigratorMockRecorder) CreateIndex(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockBaseMigrator)(nil).CreateIndex), arg0, arg1)
}

// CreateTable mocks base method.
func (m *MockBaseMigrator) CreateTable(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockBaseMigratorMockRecorder) CreateTable(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockBaseMigrator)(nil).CreateTable), arg0...)
}

// CreateView mocks base method.
func (m *MockBaseMigrator) CreateView(arg0 string, arg1 gorm.ViewOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateView indicates an expected call of CreateView.
func (mr *MockBaseMigratorMockRecorder) CreateView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockBaseMigrator)(nil).CreateView), arg0, arg1)
}

// CurrentDatabase mocks base method.
func (m *MockBaseMigrator) CurrentDatabase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentDatabase")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentDatabase indicates an expected call of CurrentDatabase.
func (mr *MockBaseMigratorMockRecorder) CurrentDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentDatabase", reflect.TypeOf((*MockBaseMigrator)(nil).CurrentDatabase))
}

// CurrentTable mocks base method.
func (m *MockBaseMigrator) CurrentTable(arg0 *gorm.Statement) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTable", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// CurrentTable indicates an expected call of CurrentTable.
func (mr *MockBaseMigratorMockRecorder) CurrentTable(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTable", reflect.TypeOf((*MockBaseMigrator)(nil).CurrentTable), arg0)
}

// DropColumn mocks base method.
func (m *MockBaseMigrator) DropColumn(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropColumn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropColumn indicates an expected call of DropColumn.
func (mr *MockBaseMigratorMockRecorder) DropColumn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropColumn", reflect.TypeOf((*MockBaseMigrator)(nil).DropColumn), arg0, arg1)
}

// DropConstraint mocks base method.
func (m *MockBaseMigrator) DropConstraint(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropConstraint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropConstraint indicates an expected call of DropConstraint.
func (mr *MockBaseMigratorMockRecorder) DropConstraint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropConstraint", reflect.TypeOf((*MockBaseMigrator)(nil).DropConstraint), arg0, arg1)
}

// DropIndex mocks base method.
func (m *MockBaseMigrator) DropIndex(arg0 any, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndex indicates an expected call of DropIndex.
func (mr *MockBaseMigratorMockRecorder) DropIndex(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndex", reflect.TypeOf((*MockBaseMigrator)(nil).DropIndex), arg0, arg1)
}

// DropTable mocks base method.
func (m *MockBaseMigrator) DropTable(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockBaseMigratorMockRecorder) DropTable(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockBaseMigrator)(nil).DropTable), arg0...)
}

// DropView mocks base method.
func (m *MockBaseMigrator) DropView(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropView", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropView indicates an expected call of DropView.
func (mr *MockBaseMigratorMockRecorder) DropView(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropView", reflect.TypeOf((*MockBaseMigrator)(nil).DropView), arg0)
}

// FullDataTypeOf mocks base method.
func (m *MockBaseMigrator) FullDataTypeOf(arg0 *schema.Field) clause.Expr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullDataTypeOf", arg0)
	ret0, _ := ret[0].(clause.Expr)
	return ret0
}

// FullDataTypeOf indicates an expected call of FullDataTypeOf.
func (mr *MockBaseMigratorMockRecorder) FullDataTypeOf(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullDataTypeOf", reflect.TypeOf((*MockBaseMigrator)(nil).FullDataTypeOf), arg0)
}

// GetIndexes mocks base method.
func (m *MockBaseMigrator) GetIndexes(arg0 any) ([]gorm.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexes", arg0)
	ret0, _ := ret[0].([]gorm.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexes indicates an expected call of GetIndexes.
func (mr *MockBaseMigratorMockRecorder) GetIndexes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexes", reflect.TypeOf((*MockBaseMigrator)(nil).GetIndexes), arg0)
}

// GetTables mocks base method.
func (m *MockBaseMigrator) GetTables() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockBaseMigratorMockRecorder) GetTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockBaseMigrator)(nil).GetTables))
}

// GetTypeAliases mocks base method.
func (m *MockBaseMigrator) GetTypeAliases(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeAliases", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTypeAliases indicates an expected call of GetTypeAliases.
func (mr *MockBaseMigratorMockRecorder) GetTypeAliases(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeAliases", reflect.TypeOf((*MockBaseMigrator)(nil).GetTypeAliases), arg0)
}

// HasColumn mocks base method.
func (m *MockBaseMigrator) HasColumn(arg0 any, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasColumn", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasColumn indicates an expected call of HasColumn.
func (mr *MockBaseMigratorMockRecorder) HasColumn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasColumn", reflect.TypeOf((*MockBaseMigrator)(nil).HasColumn), arg0, arg1)
}

// HasConstraint mocks base method.
func (m *MockBaseMigrator) HasConstraint(arg0 any, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConstraint", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConstraint indicates an expected call of HasConstraint.
func (mr *MockBaseMigratorMockRecorder) HasConstraint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConstraint", reflect.TypeOf((*MockBaseMigrator)(nil).HasConstraint), arg0, arg1)
}

// HasIndex mocks base method.
func (m *MockBaseMigrator) HasIndex(arg0 any, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasIndex", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasIndex indicates an expected call of HasIndex.
func (mr *MockBaseMigratorMockRecorder) HasIndex(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasIndex", reflect.TypeOf((*MockBaseMigrator)(nil).HasIndex), arg0, arg1)
}

// HasTable mocks base method.
func (m *MockBaseMigrator) HasTable(arg0 any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable.
func (mr *MockBaseMigratorMockRecorder) HasTable(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTable", reflect.TypeOf((*MockBaseMigrator)(nil).HasTable), arg0)
}

// MigrateColumn mocks base method.
func (m *MockBaseMigrator) MigrateColumn(arg0 any, arg1 *schema.Field, arg2 gorm.ColumnType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateColumn", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateColumn indicates an expected call of MigrateColumn.
func (mr *MockBaseMigratorMockRecorder) MigrateColumn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateColumn", reflect.TypeOf((*MockBaseMigrator)(nil).MigrateColumn), arg0, arg1, arg2)
}

// MigrateColumnUnique mocks base method.
func (m *MockBaseMigrator) MigrateColumnUnique(arg0 any, arg1 *schema.Field, arg2 gorm.ColumnType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateColumnUnique", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateColumnUnique indicates an expected call of MigrateColumnUnique.
func (mr *MockBaseMigratorMockRecorder) MigrateColumnUnique(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateColumnUnique", reflect.TypeOf((*MockBaseMigrator)(nil).MigrateColumnUnique), arg0, arg1, arg2)
}

// RenameColumn mocks base method.
func (m *MockBaseMigrator) RenameColumn(arg0 any, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameColumn", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameColumn indicates an expected call of RenameColumn.
func (mr *MockBaseMigratorMockRecorder) RenameColumn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameColumn", reflect.TypeOf((*MockBaseMigrator)(nil).RenameColumn), arg0, arg1, arg2)
}

// RenameIndex mocks base method.
func (m *MockBaseMigrator) RenameIndex(arg0 any, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameIndex indicates an expected call of RenameIndex.
func (mr *MockBaseMigratorMockRecorder) RenameIndex(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameIndex", reflect.TypeOf((*MockBaseMigrator)(nil).RenameIndex), arg0, arg1, arg2)
}

// RenameTable mocks base method.
func (m *MockBaseMigrator) RenameTable(arg0, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameTable indicates an expected call of RenameTable.
func (mr *MockBaseMigratorMockRecorder) RenameTable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameTable", reflect.TypeOf((*MockBaseMigrator)(nil).RenameTable), arg0, arg1)
}

// RunWithValue mocks base method.
func (m *MockBaseMigrator) RunWithValue(arg0 any, arg1 func(*gorm.Statement) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithValue indicates an expected call of RunWithValue.
func (mr *MockBaseMigratorMockRecorder) RunWithValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithValue", reflect.TypeOf((*MockBaseMigrator)(nil).RunWithValue), arg0, arg1)
}

// TableType mocks base method.
func (m *MockBaseMigrator) TableType(arg0 any) (gorm.TableType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableType", arg0)
	ret0, _ := ret[0].(gorm.TableType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableType indicates an expected call of TableType.
func (mr *MockBaseMigratorMockRecorder) TableType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableType", reflect.TypeOf((*MockBaseMigrator)(nil).TableType), arg0)
}
